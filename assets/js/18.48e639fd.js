(window.webpackJsonp=window.webpackJsonp||[]).push([[18],{375:function(t,e,a){"use strict";a.r(e);var s=a(25),n=Object(s.a)({},(function(){var t=this,e=t.$createElement,a=t._self._c||e;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"var-let-and-const"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#var-let-and-const"}},[t._v("#")]),t._v(" Var, let and const")]),t._v(" "),a("h3",{attrs:{id:"what-s-the-difference"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#what-s-the-difference"}},[t._v("#")]),t._v(" What's the difference?")]),t._v(" "),a("p",[t._v("A lot of shiny new features came with ES2015 (ES6), and it's assumed that a lot of JavaScript developers have become familiar with and have started using these features. While this assumption might be true, it's still possible that some of these features remain a mystery to some.")]),t._v(" "),a("p",[t._v("One of the features that came with ES6 is addition of "),a("code",[t._v("let")]),t._v(" and "),a("code",[t._v("const")]),t._v(" which can be used for variable declaration. The question now is, what makes them different from our good ol' "),a("code",[t._v("var")]),t._v(" which has been in use? If you are still not clear about this, this article is for you.")]),t._v(" "),a("p",[t._v("In this article, "),a("code",[t._v("var")]),t._v(", "),a("code",[t._v("let")]),t._v(" and "),a("code",[t._v("const")]),t._v(" will be discussed with respect to their scope, use and hoisting. As you read, take note of the differences between them I'll point out.")]),t._v(" "),a("h2",{attrs:{id:"var"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#var"}},[t._v("#")]),t._v(" VAR")]),t._v(" "),a("p",[t._v("Before the advent of ES6, "),a("code",[t._v("var")]),t._v(" declarations ruled as King. There are issues associated with variables declared with "),a("code",[t._v("var")]),t._v(" though. That is why it was necessary for new ways to declare variables to emerge. First though, let us get to understand "),a("code",[t._v("var")]),t._v(" more before we discuss one of such issues.")]),t._v(" "),a("p",[t._v("Scope of "),a("code",[t._v("var")])]),t._v(" "),a("p",[t._v("Scope essentially means where these variables are available for use. "),a("code",[t._v("var")]),t._v(" declarations are globally scoped or function/locally scoped. It is globally scoped when a "),a("code",[t._v("var")]),t._v(" variable is declared outside a function. This means that any variable that is declared with "),a("code",[t._v("var")]),t._v(" outside a function block is available for use in the whole window. "),a("code",[t._v("var")]),t._v(" is function scoped when it is declared within a function. This means that it is available and can be accessed only within that function."),a("br"),t._v("\nTo understand further, look at the example below.")]),t._v(" "),a("div",{staticClass:"language-javascript extra-class"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[t._v("    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" greeter "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"hey hi"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("newFunction")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" hello "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"hello"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n")])])]),a("p",[t._v("Here, "),a("code",[t._v("greeter")]),t._v(" is globally scoped because it exists outside a function while "),a("code",[t._v("hello")]),t._v(" is function scoped. So we cannot access the variable "),a("code",[t._v("hello")]),t._v(" outside of a function. So if we do this:")]),t._v(" "),a("div",{staticClass:"language-javascript extra-class"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[t._v("    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" tester "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"hey hi"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("newFunction")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" hello "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"hello"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("hello"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// error: hello is not defined")]),t._v("\n\n")])])]),a("p",[t._v("We'll get an error which is as a result of "),a("code",[t._v("hello")]),t._v(" not being available outside the function.")]),t._v(" "),a("p",[a("code",[t._v("var")]),t._v(" variables can be re-declared and updated")]),t._v(" "),a("p",[t._v("That means that we can do this within the same scope and won't get an error.")]),t._v(" "),a("div",{staticClass:"language-javascript extra-class"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[t._v("    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" greeter "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"hey hi"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" greeter "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"say Hello instead"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n")])])]),a("p",[t._v("and this also")]),t._v(" "),a("div",{staticClass:"language-javascript extra-class"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[t._v("    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" greeter "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"hey hi"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    greeter "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"say Hello instead"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n")])])]),a("h2",{attrs:{id:"hoisting"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#hoisting"}},[t._v("#")]),t._v(" Hoisting")]),t._v(" "),a("p",[t._v("Hoisting is a JavaScript mechanism where variables and function declarations are moved to the top of their scope before code execution. What this means is that if we do this:")]),t._v(" "),a("div",{staticClass:"language-javascript extra-class"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[t._v("    console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("greeter"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" greeter "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"say hello"')]),t._v("\n\n")])])]),a("p",[t._v("it is interpreted as this")]),t._v(" "),a("div",{staticClass:"language-javascript extra-class"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[t._v("    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" greeter"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("greeter"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//greeter is undefined")]),t._v("\n    greeter "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"say hello"')]),t._v("\n\n")])])]),a("p",[t._v("So "),a("code",[t._v("var")]),t._v(" variables are hoisted to the top of its scope and initialized with a value of undefined.")]),t._v(" "),a("p",[t._v("Problem with "),a("code",[t._v("var")])]),t._v(" "),a("p",[t._v("There's a weakness that comes with "),a("code",[t._v("var")]),t._v(". I'll use the example below to explain this.")]),t._v(" "),a("div",{staticClass:"language-javascript extra-class"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[t._v("    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" greeter "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"hey hi"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" times "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("times "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" greeter "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"say Hello instead"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n    console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("greeter"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v('//"say Hello instead"')]),t._v("\n\n")])])]),a("p",[t._v("So, since "),a("code",[t._v("times > 3")]),t._v(" returns true, "),a("code",[t._v("greeter")]),t._v(" is redefined to "),a("code",[t._v('"say Hello instead"')]),t._v(". While this is not a problem if you knowingly want "),a("code",[t._v("greeter")]),t._v(" to be redefined, it becomes a problem when you do not realize that a variable "),a("code",[t._v("greeter")]),t._v(" has already been defined before."),a("br"),t._v("\nIf you have use "),a("code",[t._v("greeter")]),t._v(" in other parts of your code, you might be surprised at the output you might get. This might cause a lot of bugs in your code. This is why the "),a("code",[t._v("let")]),t._v(" and "),a("code",[t._v("const")]),t._v(" is necessary.")]),t._v(" "),a("h2",{attrs:{id:"let"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#let"}},[t._v("#")]),t._v(" LET")]),t._v(" "),a("p",[a("code",[t._v("let")]),t._v(" is preferred for variable declaration now. It's no surprise as it comes as an improvement to the "),a("code",[t._v("var")]),t._v(" declarations. It also solves this problem that was raised in the last subheading. Let's consider why this is so.")]),t._v(" "),a("p",[a("code",[t._v("let")]),t._v(" is block scoped")]),t._v(" "),a("p",[t._v("A block is chunk of code bounded by {}. A block lives in curly braces. Anything within curly braces is a block. So a variable declared in a block with the "),a("code",[t._v("let")]),t._v(" is only available for use within that block. Let me explain this with an example.")]),t._v(" "),a("div",{staticClass:"language-javascript extra-class"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[t._v("   "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" greeting "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"say Hi"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n   "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" times "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n   "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("times "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" hello "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"say Hello instead"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("hello"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v('//"say Hello instead"')]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n   console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("hello"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// hello is not defined")]),t._v("\n\n")])])]),a("p",[t._v("We see that using "),a("code",[t._v("hello")]),t._v(" outside its block(the curly braces where it was defined) returns an error. This is because "),a("code",[t._v("let")]),t._v(" variables are block scoped .")]),t._v(" "),a("p",[a("code",[t._v("let")]),t._v(" can be updated but not re-declared.")]),t._v(" "),a("p",[t._v("Just like "),a("code",[t._v("var")]),t._v(", a variable declared with "),a("code",[t._v("let")]),t._v(" can be updated within its scope. Unlike"),a("code",[t._v("var")]),t._v(", a "),a("code",[t._v("let")]),t._v(" variable cannot be re-declared within its scope. So while this will work,")]),t._v(" "),a("div",{staticClass:"language-javascript extra-class"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[t._v("    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" greeting "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"say Hi"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    greeting "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"say Hello instead"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n")])])]),a("p",[t._v("this will return an error.")]),t._v(" "),a("div",{staticClass:"language-javascript extra-class"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[t._v("    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" greeting "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"say Hi"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" greeting "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"say Hello instead"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//error: Identifier 'greeting' has already been declared")]),t._v("\n\n")])])]),a("p",[t._v("However, if the same variable is defined in different scopes, there will be no error.")]),t._v(" "),a("div",{staticClass:"language-javascript extra-class"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[t._v("    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" greeting "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"say Hi"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" greeting "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"say Hello instead"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("greeting"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v('//"say Hello instead"')]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("greeting"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v('//"say Hi"')]),t._v("\n\n")])])]),a("p",[t._v("Why is there no error? This is because both instances are treated as different variables since they have different scopes.")]),t._v(" "),a("p",[t._v("This fact makes "),a("code",[t._v("let")]),t._v(" a better choice than "),a("code",[t._v("var")]),t._v(". When using "),a("code",[t._v("let")]),t._v(", you don't have to bother if you have used a name for a variable before as a variable exists only within its scope. Also, since a variable cannot be declared more than once within a scope, then the problem discussed earlier that occurs with "),a("code",[t._v("var")]),t._v(" does not occur.")]),t._v(" "),a("p",[t._v("Hoisting of "),a("code",[t._v("let")]),a("br"),t._v("\nJust like "),a("code",[t._v("var")]),t._v(", "),a("code",[t._v("let")]),t._v(" declarations are hoisted to the top. Unlike "),a("code",[t._v("var")]),t._v(" which is initialized as "),a("code",[t._v("undefined")]),t._v(", the "),a("code",[t._v("let")]),t._v(" keyword is not initialized. So if you try to use a "),a("code",[t._v("let")]),t._v(" variable before declaration, you'll get a "),a("code",[t._v("Reference Error")]),t._v(".")]),t._v(" "),a("h2",{attrs:{id:"const"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#const"}},[t._v("#")]),t._v(" CONST")]),t._v(" "),a("p",[t._v("Variables declared with the "),a("code",[t._v("const")]),t._v(" maintain constant values. "),a("code",[t._v("const")]),t._v(" declarations share some similarities with "),a("code",[t._v("let")]),t._v(" declarations.")]),t._v(" "),a("p",[a("code",[t._v("const")]),t._v(" declarations are block scoped")]),t._v(" "),a("p",[t._v("Like "),a("code",[t._v("let")]),t._v(" declarations, "),a("code",[t._v("const")]),t._v(" declarations can only be accessed within the block it was declared.")]),t._v(" "),a("p",[a("code",[t._v("const")]),t._v(" cannot be updated or re-declared")]),t._v(" "),a("p",[t._v("This means that the value of a variable declared with "),a("code",[t._v("const")]),t._v(" remains the same within its scope. It cannot be updated or re-declared. So if we declare a variable with "),a("code",[t._v("const")]),t._v(", we can neither do this")]),t._v(" "),a("div",{staticClass:"language-javascript extra-class"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[t._v("    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" greeting "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"say Hi"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    greeting "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"say Hello instead"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//error : Assignment to constant variable.")]),t._v("\n\n")])])]),a("p",[t._v("nor this")]),t._v(" "),a("div",{staticClass:"language-javascript extra-class"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[t._v("    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" greeting "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"say Hi"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" greeting "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"say Hello instead"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//error : Identifier 'greeting' has already been declared")]),t._v("\n\n")])])]),a("p",[t._v("Every const declaration therefore, must be initialized at the time of declaration."),a("br"),t._v("\nThis behavior is somehow different when it comes to objects declared with "),a("code",[t._v("const")]),t._v(". While a "),a("code",[t._v("const")]),t._v(" object cannot be updated, the properties of this objects can be updated. Therefore, if we declare a "),a("code",[t._v("const")]),t._v(" object as this")]),t._v(" "),a("div",{staticClass:"language-javascript extra-class"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[t._v("    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" greeting "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        message "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"say Hi"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n        times "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n")])])]),a("p",[t._v("while we cannot do this")]),t._v(" "),a("div",{staticClass:"language-javascript extra-class"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[t._v("    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" greeting "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        words "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Hello"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n        number "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"five"')]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//error :  Assignment to constant variable.")]),t._v("\n\n")])])]),a("p",[t._v("we can do this")]),t._v(" "),a("div",{staticClass:"language-javascript extra-class"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[t._v("    greeting"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("message "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"say Hello instead"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n")])])]),a("p",[t._v("This will update the value of "),a("code",[t._v("greeting.message")]),t._v(" without returning errors.")]),t._v(" "),a("p",[t._v("Hoisting of "),a("code",[t._v("const")])]),t._v(" "),a("p",[t._v("Just like "),a("code",[t._v("let")]),t._v(", "),a("code",[t._v("const")]),t._v(" declarations are hoisted to the top but are not initialized.")]),t._v(" "),a("p",[t._v("So just in case, you missed the differences, here they are :")]),t._v(" "),a("ol",[a("li",[a("p",[a("code",[t._v("var")]),t._v(" declarations are globally scoped or function scoped while "),a("code",[t._v("let")]),t._v(" and "),a("code",[t._v("const")]),t._v(" are block scoped.")])]),t._v(" "),a("li",[a("p",[a("code",[t._v("var")]),t._v(" variables can be updated and re-declared within its scope; "),a("code",[t._v("let")]),t._v(" variables can be updated but not re-declared; "),a("code",[t._v("const")]),t._v(" variables can neither be updated nor re-declared.")])]),t._v(" "),a("li",[a("p",[t._v("They are all hoisted to the top of their scope but while "),a("code",[t._v("var")]),t._v("variables are initialized with "),a("code",[t._v("undefined")]),t._v(", "),a("code",[t._v("let")]),t._v(" and "),a("code",[t._v("const")]),t._v(" variables are not initialized.")])]),t._v(" "),a("li",[a("p",[t._v("While "),a("code",[t._v("var")]),t._v(" and "),a("code",[t._v("let")]),t._v(" can be declared without being initialized, "),a("code",[t._v("const")]),t._v(" must be initialized during declaration.")])])]),t._v(" "),a("br"),t._v(" "),a("br"),t._v(" "),a("hr"),t._v(" "),a("small",[t._v("Chima, Sarah. Var, Let and Const- What's the Difference? 8 Jan. 2020, dev.to/sarah_chima/var-let-and-const--whats-the-difference-69e. ")]),t._v(" "),a("br")])}),[],!1,null,null,null);e.default=n.exports}}]);